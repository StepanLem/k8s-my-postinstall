# GitLab Runner configuration for development environment

# версию и values смотри на артифактхаб:
# https://artifacthub.io/packages/helm/gitlab/gitlab-runner?modal=values

# Ну крч для улучшения ещё много оф доки и full-values читать надо будет.

# namespace для runner. По сути не нужен, ты ведь при деплое указываешь в каком неймспейспе развернуть.
# namespace: gitlab-runnet

# GitLab Runner configuration
gitlabUrl: "https://gitlab.com" # или ваш GitLab instance URL
runnerRegistrationToken: "" # токен регистрации из GitLab. Задаётся не здесь, а в runners секрет.
# , да и не задаётся впринципе вроде.

# ready и live пробы мне самому писать? Почему они закоментированны в ориганльном чарте?

concurrent: 10

# https://docs.gitlab.com/runner/configuration/advanced-configuration.html
# Runner configuration
runners:

  # namespace в котором будут создаваться поды
  # Там походу надо service account менять вместе с изменением этого
  # jobNamespace: gitlab-jobs # тебе надо создать его вручную заранее? хз. 

  ## The name of the secret containing runner-token and runner-registration-token. 
  ## надо написать в чём между ними разница. И как там ломается при обнолвении пода. Крч явно написать об этом.
  secret: gitlab-runner-credentials

  # это смотри подробнее в values
  # cache:

  # бля это надо самому составить.
  # Где cpu и memory смотреть выставлять. тут в конфиге конечно. Выставить.
  config: |
    [[runners]]
      [runners.kubernetes]
        namespace = "{{ default .Release.Namespace .Values.runners.jobNamespace }}"
        image = "alpine"

# Это ошибка в логах. Видимо надо в конфиге ранера выше сделать concurency.
#   WARNING: CONFIGURATION: Long polling issues detected.
# Issues found:
#   - Request bottleneck: 1 runners have request_concurrency=1, causing job delays during long polling
# This can cause job delays matching your GitLab instance's long polling timeout.
# Recommended solutions:
#   1. Increase 'request_concurrency' to 2-4 for 1 runners currently using request_concurrency=1
# Note: The 'FF_USE_ADAPTIVE_REQUEST_CONCURRENCY' feature flag can help automatically adjust request_concurrency based on workload.
# This message will be printed each time the configuration is reloaded if the issues persist.
# See documentation: https://docs.gitlab.com/runner/configuration/advanced-configuration.html#long-polling-issues  builds=0 max_builds=10
# listen_address not defined, metrics & debug endpoints disabled  builds=0 max_builds=10
# [session_server].listen_address not defined, session endpoints disabled  builds=0 max_builds=10
# Initializing executor providers                     builds=0 max_builds=10
  

# Resources configuration
resources:
  requests:
    memory: "256Mi"
    cpu: "100m"
  limits:
    memory: "1Gi"
    cpu: "500m"

# Node selector (optional)
# nodeSelector:
#   kubernetes.io/hostname: node3

# Metrics configuration. Вот когда узнаю что это, тогда включу. Понятно что для прометеуса, но...
metrics:
  enabled: false
  serviceMonitor:
    enabled: false

# Service configuration(для metrics для прометеуса. Читай полные values)
# service:
  # enabled: false
  # type: ClusterIP
  # nodePort:
  # metrics: 9252


# Network policies
networkPolicy:
  enabled: false

# # Pod security context
# podSecurityContext:
#   fsGroup: 1001
#   runAsUser: 1001
#   runAsGroup: 1001
#   runAsNonRoot: true

# # Container security context
# containerSecurityContext:
#   allowPrivilegeEscalation: false
#   capabilities:
#     drop:
#       - ALL
#   readOnlyRootFilesystem: false
#   runAsNonRoot: true
#   runAsUser: 1001

# Environment variables
# extraEnv:

# RBAC configuration
rbac:
  create: true
#  rules:

# Service account
serviceAccount:
  create: true
  # annotations: {}
  # name: ""
